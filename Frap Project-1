{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dependencies\n",
    "import csv\n",
    "import matplotlib.pyplot as plt\n",
    "import requests\n",
    "import json\n",
    "import pandas as pd\n",
    "# import plotly.express as px\n",
    "from config import api\n",
    "from citipy import citipy\n",
    "from wwo_hist import retrieve_hist_data\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OperatingDate        10538\n",
       "UnitName             10538\n",
       "cyHighTemperature    10538\n",
       "cyImpactName         10538\n",
       "cyLowTemperature     10538\n",
       "cyTotal              10538\n",
       "cyWeather1           10538\n",
       "cyWeather2            9992\n",
       "dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#read csv file\n",
    "data = pd.read_csv('Attendance 2015_2019 Final.csv',encoding = \"utf-8\")\n",
    "data.count()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OperatingDate</th>\n",
       "      <th>UnitName</th>\n",
       "      <th>cyHighTemperature</th>\n",
       "      <th>cyImpactName</th>\n",
       "      <th>cyLowTemperature</th>\n",
       "      <th>cyTotal</th>\n",
       "      <th>cyWeather1</th>\n",
       "      <th>cyWeather2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1/1/2015</td>\n",
       "      <td>Dollywood</td>\n",
       "      <td>44</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>26</td>\n",
       "      <td>15889</td>\n",
       "      <td>L26/H45/A35/Partly Cloudy/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1/1/2015</td>\n",
       "      <td>Stone Mountain</td>\n",
       "      <td>55</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>29</td>\n",
       "      <td>8209</td>\n",
       "      <td>L29/H55/A42/P0.08/Partly Cloudy/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1/1/2015</td>\n",
       "      <td>Wild Adventures</td>\n",
       "      <td>60</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>46</td>\n",
       "      <td>2558</td>\n",
       "      <td>L46/H60/A53/Partly Cloudy/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1/1/2015</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>32</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>21</td>\n",
       "      <td>2224</td>\n",
       "      <td>L21/H39/A29/Partly Cloudy/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1/1/2015</td>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>35</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>27</td>\n",
       "      <td>3031</td>\n",
       "      <td>L27/H41/A34/Mostly Sunny/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  OperatingDate                        UnitName  cyHighTemperature  \\\n",
       "0      1/1/2015  Dollywood                                      44   \n",
       "1      1/1/2015  Stone Mountain                                 55   \n",
       "2      1/1/2015  Wild Adventures                                60   \n",
       "3      1/1/2015  Newport Aquarium                               32   \n",
       "4      1/1/2015  Adventure Aquarium                             35   \n",
       "\n",
       "        cyImpactName  cyLowTemperature  cyTotal  \\\n",
       "0  No weather impact                26    15889   \n",
       "1  No weather impact                29     8209   \n",
       "2  No weather impact                46     2558   \n",
       "3  No weather impact                21     2224   \n",
       "4  No weather impact                27     3031   \n",
       "\n",
       "                                 cyWeather1 cyWeather2  \n",
       "0        L26/H45/A35/Partly Cloudy/Pleasant        NaN  \n",
       "1  L29/H55/A42/P0.08/Partly Cloudy/Pleasant        NaN  \n",
       "2        L46/H60/A53/Partly Cloudy/Pleasant        NaN  \n",
       "3        L21/H39/A29/Partly Cloudy/Pleasant        NaN  \n",
       "4         L27/H41/A34/Mostly Sunny/Pleasant        NaN  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Newport Aquarium                  1824\n",
       "Adventure Aquarium                1824\n",
       "Stone Mountain                    1824\n",
       "Dollywood                         1307\n",
       "Silver Dollar City                1147\n",
       "Wild Adventures                    863\n",
       "Dollywood Splash Country           510\n",
       "White Water                        459\n",
       "Dollywood Cabins                   416\n",
       "DreamMore Resort                   364\n",
       "Name: UnitName, dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[\"UnitName\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OperatingDate</th>\n",
       "      <th>UnitName</th>\n",
       "      <th>cyHighTemperature</th>\n",
       "      <th>cyImpactName</th>\n",
       "      <th>cyLowTemperature</th>\n",
       "      <th>cyTotal</th>\n",
       "      <th>cyWeather1</th>\n",
       "      <th>cyWeather2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Dollywood</td>\n",
       "      <td>44</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>26</td>\n",
       "      <td>15889</td>\n",
       "      <td>L26/H45/A35/Partly Cloudy/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Stone Mountain</td>\n",
       "      <td>55</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>29</td>\n",
       "      <td>8209</td>\n",
       "      <td>L29/H55/A42/P0.08/Partly Cloudy/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Wild Adventures</td>\n",
       "      <td>60</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>46</td>\n",
       "      <td>2558</td>\n",
       "      <td>L46/H60/A53/Partly Cloudy/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>32</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>21</td>\n",
       "      <td>2224</td>\n",
       "      <td>L21/H39/A29/Partly Cloudy/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>35</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>27</td>\n",
       "      <td>3031</td>\n",
       "      <td>L27/H41/A34/Mostly Sunny/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  OperatingDate                        UnitName  cyHighTemperature  \\\n",
       "0    2015-01-01  Dollywood                                      44   \n",
       "1    2015-01-01  Stone Mountain                                 55   \n",
       "2    2015-01-01  Wild Adventures                                60   \n",
       "3    2015-01-01  Newport Aquarium                               32   \n",
       "4    2015-01-01  Adventure Aquarium                             35   \n",
       "\n",
       "        cyImpactName  cyLowTemperature  cyTotal  \\\n",
       "0  No weather impact                26    15889   \n",
       "1  No weather impact                29     8209   \n",
       "2  No weather impact                46     2558   \n",
       "3  No weather impact                21     2224   \n",
       "4  No weather impact                27     3031   \n",
       "\n",
       "                                 cyWeather1 cyWeather2  \n",
       "0        L26/H45/A35/Partly Cloudy/Pleasant        NaN  \n",
       "1  L29/H55/A42/P0.08/Partly Cloudy/Pleasant        NaN  \n",
       "2        L46/H60/A53/Partly Cloudy/Pleasant        NaN  \n",
       "3        L21/H39/A29/Partly Cloudy/Pleasant        NaN  \n",
       "4         L27/H41/A34/Mostly Sunny/Pleasant        NaN  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#change the date format\n",
    "data[\"OperatingDate\"]=pd.to_datetime(data.OperatingDate)\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OperatingDate</th>\n",
       "      <th>UnitName</th>\n",
       "      <th>Zipcode</th>\n",
       "      <th>cyHighTemperature</th>\n",
       "      <th>cyImpactName</th>\n",
       "      <th>cyLowTemperature</th>\n",
       "      <th>cyTotal</th>\n",
       "      <th>cyWeather1</th>\n",
       "      <th>cyWeather2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Dollywood</td>\n",
       "      <td>37863</td>\n",
       "      <td>44</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>26</td>\n",
       "      <td>15889</td>\n",
       "      <td>L26/H45/A35/Partly Cloudy/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Stone Mountain</td>\n",
       "      <td>aa</td>\n",
       "      <td>55</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>29</td>\n",
       "      <td>8209</td>\n",
       "      <td>L29/H55/A42/P0.08/Partly Cloudy/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Wild Adventures</td>\n",
       "      <td>aa</td>\n",
       "      <td>60</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>46</td>\n",
       "      <td>2558</td>\n",
       "      <td>L46/H60/A53/Partly Cloudy/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>41071</td>\n",
       "      <td>32</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>21</td>\n",
       "      <td>2224</td>\n",
       "      <td>L21/H39/A29/Partly Cloudy/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>08103</td>\n",
       "      <td>35</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>27</td>\n",
       "      <td>3031</td>\n",
       "      <td>L27/H41/A34/Mostly Sunny/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  OperatingDate                        UnitName Zipcode  cyHighTemperature  \\\n",
       "0    2015-01-01  Dollywood                        37863                 44   \n",
       "1    2015-01-01  Stone Mountain                      aa                 55   \n",
       "2    2015-01-01  Wild Adventures                     aa                 60   \n",
       "3    2015-01-01  Newport Aquarium                 41071                 32   \n",
       "4    2015-01-01  Adventure Aquarium               08103                 35   \n",
       "\n",
       "        cyImpactName  cyLowTemperature  cyTotal  \\\n",
       "0  No weather impact                26    15889   \n",
       "1  No weather impact                29     8209   \n",
       "2  No weather impact                46     2558   \n",
       "3  No weather impact                21     2224   \n",
       "4  No weather impact                27     3031   \n",
       "\n",
       "                                 cyWeather1 cyWeather2  \n",
       "0        L26/H45/A35/Partly Cloudy/Pleasant        NaN  \n",
       "1  L29/H55/A42/P0.08/Partly Cloudy/Pleasant        NaN  \n",
       "2        L46/H60/A53/Partly Cloudy/Pleasant        NaN  \n",
       "3        L21/H39/A29/Partly Cloudy/Pleasant        NaN  \n",
       "4         L27/H41/A34/Mostly Sunny/Pleasant        NaN  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#assiging zip code and adding new colmumn \"Zip code\" to the data frame\n",
    "Zip_code = pd.Series([]) \n",
    "\n",
    "for i in range(len(data)):\n",
    "    \n",
    "    if data[\"UnitName\"][i].strip() ==\"Dollywood\":\n",
    "        Zip_code[i]=\"37863\"\n",
    "        \n",
    "    elif data[\"UnitName\"][i].strip() ==\"Dollywood Splash Country\" :\n",
    "        Zip_code[i]=\"37863\"\n",
    "        \n",
    "    elif data[\"UnitName\"][i].strip() ==\"White Water\":\n",
    "        Zip_code[i]=\"65616\"\n",
    "    elif data[\"UnitName\"][i].strip() ==\"Silver Dollar City\":\n",
    "        Zip_code[i]=\"65616\"\n",
    "    elif data[\"UnitName\"][i].strip() ==\"Adventure Aquarium\":\n",
    "        Zip_code[i]=\"08103\"    \n",
    "    elif data[\"UnitName\"][i].strip() ==\"Newport Aquarium\":\n",
    "        Zip_code[i]=\"41071\"   \n",
    "    else :\n",
    "        Zip_code[i]=\"aa\"\n",
    "        \n",
    "\n",
    "        \n",
    "data.insert(2,\"Zipcode\",Zip_code)        \n",
    "        \n",
    "data.head()        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "#remove any trailing spaces from the dataframe\n",
    "data[\"UnitName\"] = data[\"UnitName\"].str.strip()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Adventure Aquarium          1824\n",
       "Stone Mountain              1824\n",
       "Newport Aquarium            1824\n",
       "Dollywood                   1307\n",
       "Silver Dollar City          1147\n",
       "Wild Adventures              863\n",
       "Dollywood Splash Country     510\n",
       "White Water                  459\n",
       "DreamMore Resort             364\n",
       "Name: UnitName, dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#removing rows that are not required\n",
    "\n",
    "data2 = data.loc[data[\"UnitName\"] != \"Dollywood Cabins\", ]\n",
    "data2[\"UnitName\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Adventure Aquarium          1824\n",
       "Newport Aquarium            1824\n",
       "Dollywood                   1307\n",
       "Silver Dollar City          1147\n",
       "Wild Adventures              863\n",
       "Dollywood Splash Country     510\n",
       "White Water                  459\n",
       "DreamMore Resort             364\n",
       "Name: UnitName, dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#removing rows that are not required\n",
    "\n",
    "data3 = data2.loc[data2[\"UnitName\"] != \"Stone Mountain\", ]\n",
    "data3[\"UnitName\"].value_counts()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Adventure Aquarium          1824\n",
       "Newport Aquarium            1824\n",
       "Dollywood                   1307\n",
       "Silver Dollar City          1147\n",
       "Dollywood Splash Country     510\n",
       "White Water                  459\n",
       "DreamMore Resort             364\n",
       "Name: UnitName, dtype: int64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#removing rows that are not required\n",
    "\n",
    "data4 = data3.loc[data3[\"UnitName\"] != \"Wild Adventures\", ]\n",
    "data4[\"UnitName\"].value_counts()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Adventure Aquarium          1824\n",
       "Newport Aquarium            1824\n",
       "Dollywood                   1307\n",
       "Silver Dollar City          1147\n",
       "Dollywood Splash Country     510\n",
       "White Water                  459\n",
       "Name: UnitName, dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#removing rows that are not required\n",
    "\n",
    "finaldata = data4.loc[data3[\"UnitName\"] != \"DreamMore Resort\", ]\n",
    "finaldata[\"UnitName\"].value_counts()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OperatingDate</th>\n",
       "      <th>UnitName</th>\n",
       "      <th>Zipcode</th>\n",
       "      <th>cyHighTemperature</th>\n",
       "      <th>cyImpactName</th>\n",
       "      <th>cyLowTemperature</th>\n",
       "      <th>cyTotal</th>\n",
       "      <th>cyWeather1</th>\n",
       "      <th>cyWeather2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Dollywood</td>\n",
       "      <td>37863</td>\n",
       "      <td>44</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>26</td>\n",
       "      <td>15889</td>\n",
       "      <td>L26/H45/A35/Partly Cloudy/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>41071</td>\n",
       "      <td>32</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>21</td>\n",
       "      <td>2224</td>\n",
       "      <td>L21/H39/A29/Partly Cloudy/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>08103</td>\n",
       "      <td>35</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>27</td>\n",
       "      <td>3031</td>\n",
       "      <td>L27/H41/A34/Mostly Sunny/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>Dollywood</td>\n",
       "      <td>37863</td>\n",
       "      <td>46</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>41</td>\n",
       "      <td>6618</td>\n",
       "      <td>L41/H45/A44/P0.02/Mostly Cloudy/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>41071</td>\n",
       "      <td>37</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>30</td>\n",
       "      <td>3228</td>\n",
       "      <td>L30/H39/A35/Partly Cloudy/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10529</th>\n",
       "      <td>2019-12-28</td>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>08103</td>\n",
       "      <td>54</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>36</td>\n",
       "      <td>3864</td>\n",
       "      <td>L36/H55/A44/Mostly Sunny/Pleasant             ...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10530</th>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>Silver Dollar City</td>\n",
       "      <td>65616</td>\n",
       "      <td>53</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>38</td>\n",
       "      <td>21400</td>\n",
       "      <td>L38/H54/A48/Mostly Cloudy/Pleasant            ...</td>\n",
       "      <td>Cloudy                                        ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10531</th>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>Dollywood</td>\n",
       "      <td>37863</td>\n",
       "      <td>78</td>\n",
       "      <td>Both precipitation/temp</td>\n",
       "      <td>50</td>\n",
       "      <td>20977</td>\n",
       "      <td>L50/H77/A64/P0.37/Partly Cloudy/Pleasant      ...</td>\n",
       "      <td>Substantial Heavy Rain/Some Hot Temps         ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10536</th>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>41071</td>\n",
       "      <td>60</td>\n",
       "      <td>Unfavorable temperature</td>\n",
       "      <td>55</td>\n",
       "      <td>3340</td>\n",
       "      <td>L55/H61/A57/P1.13/Cloudy/Pleasant             ...</td>\n",
       "      <td>Some Hot Temps                                ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10537</th>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>08103</td>\n",
       "      <td>43</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>33</td>\n",
       "      <td>4237</td>\n",
       "      <td>L33/H46/A41/P0.27/Cloudy/Pleasant             ...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7071 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      OperatingDate            UnitName Zipcode  cyHighTemperature  \\\n",
       "0        2015-01-01           Dollywood   37863                 44   \n",
       "3        2015-01-01    Newport Aquarium   41071                 32   \n",
       "4        2015-01-01  Adventure Aquarium   08103                 35   \n",
       "5        2015-01-02           Dollywood   37863                 46   \n",
       "8        2015-01-02    Newport Aquarium   41071                 37   \n",
       "...             ...                 ...     ...                ...   \n",
       "10529    2019-12-28  Adventure Aquarium   08103                 54   \n",
       "10530    2019-12-29  Silver Dollar City   65616                 53   \n",
       "10531    2019-12-29           Dollywood   37863                 78   \n",
       "10536    2019-12-29    Newport Aquarium   41071                 60   \n",
       "10537    2019-12-29  Adventure Aquarium   08103                 43   \n",
       "\n",
       "                    cyImpactName  cyLowTemperature  cyTotal  \\\n",
       "0              No weather impact                26    15889   \n",
       "3              No weather impact                21     2224   \n",
       "4              No weather impact                27     3031   \n",
       "5              No weather impact                41     6618   \n",
       "8              No weather impact                30     3228   \n",
       "...                          ...               ...      ...   \n",
       "10529  No weather impact                        36     3864   \n",
       "10530  No weather impact                        38    21400   \n",
       "10531  Both precipitation/temp                  50    20977   \n",
       "10536  Unfavorable temperature                  55     3340   \n",
       "10537  No weather impact                        33     4237   \n",
       "\n",
       "                                              cyWeather1  \\\n",
       "0                     L26/H45/A35/Partly Cloudy/Pleasant   \n",
       "3                     L21/H39/A29/Partly Cloudy/Pleasant   \n",
       "4                      L27/H41/A34/Mostly Sunny/Pleasant   \n",
       "5               L41/H45/A44/P0.02/Mostly Cloudy/Pleasant   \n",
       "8                     L30/H39/A35/Partly Cloudy/Pleasant   \n",
       "...                                                  ...   \n",
       "10529  L36/H55/A44/Mostly Sunny/Pleasant             ...   \n",
       "10530  L38/H54/A48/Mostly Cloudy/Pleasant            ...   \n",
       "10531  L50/H77/A64/P0.37/Partly Cloudy/Pleasant      ...   \n",
       "10536  L55/H61/A57/P1.13/Cloudy/Pleasant             ...   \n",
       "10537  L33/H46/A41/P0.27/Cloudy/Pleasant             ...   \n",
       "\n",
       "                                              cyWeather2  \n",
       "0                                                    NaN  \n",
       "3                                                    NaN  \n",
       "4                                                    NaN  \n",
       "5                                                    NaN  \n",
       "8                                                    NaN  \n",
       "...                                                  ...  \n",
       "10529                                                ...  \n",
       "10530  Cloudy                                        ...  \n",
       "10531  Substantial Heavy Rain/Some Hot Temps         ...  \n",
       "10536  Some Hot Temps                                ...  \n",
       "10537                                                ...  \n",
       "\n",
       "[7071 rows x 9 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finaldata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OperatingDate</th>\n",
       "      <th>Park Name</th>\n",
       "      <th>Zipcode</th>\n",
       "      <th>High Temp</th>\n",
       "      <th>cyImpactName</th>\n",
       "      <th>Low Temp</th>\n",
       "      <th>Total Attendance</th>\n",
       "      <th>cyWeather1</th>\n",
       "      <th>cyWeather2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Dollywood</td>\n",
       "      <td>37863</td>\n",
       "      <td>44</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>26</td>\n",
       "      <td>15889</td>\n",
       "      <td>L26/H45/A35/Partly Cloudy/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>41071</td>\n",
       "      <td>32</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>21</td>\n",
       "      <td>2224</td>\n",
       "      <td>L21/H39/A29/Partly Cloudy/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>08103</td>\n",
       "      <td>35</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>27</td>\n",
       "      <td>3031</td>\n",
       "      <td>L27/H41/A34/Mostly Sunny/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>Dollywood</td>\n",
       "      <td>37863</td>\n",
       "      <td>46</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>41</td>\n",
       "      <td>6618</td>\n",
       "      <td>L41/H45/A44/P0.02/Mostly Cloudy/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>41071</td>\n",
       "      <td>37</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>30</td>\n",
       "      <td>3228</td>\n",
       "      <td>L30/H39/A35/Partly Cloudy/Pleasant</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10529</th>\n",
       "      <td>2019-12-28</td>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>08103</td>\n",
       "      <td>54</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>36</td>\n",
       "      <td>3864</td>\n",
       "      <td>L36/H55/A44/Mostly Sunny/Pleasant             ...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10530</th>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>Silver Dollar City</td>\n",
       "      <td>65616</td>\n",
       "      <td>53</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>38</td>\n",
       "      <td>21400</td>\n",
       "      <td>L38/H54/A48/Mostly Cloudy/Pleasant            ...</td>\n",
       "      <td>Cloudy                                        ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10531</th>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>Dollywood</td>\n",
       "      <td>37863</td>\n",
       "      <td>78</td>\n",
       "      <td>Both precipitation/temp</td>\n",
       "      <td>50</td>\n",
       "      <td>20977</td>\n",
       "      <td>L50/H77/A64/P0.37/Partly Cloudy/Pleasant      ...</td>\n",
       "      <td>Substantial Heavy Rain/Some Hot Temps         ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10536</th>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>41071</td>\n",
       "      <td>60</td>\n",
       "      <td>Unfavorable temperature</td>\n",
       "      <td>55</td>\n",
       "      <td>3340</td>\n",
       "      <td>L55/H61/A57/P1.13/Cloudy/Pleasant             ...</td>\n",
       "      <td>Some Hot Temps                                ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10537</th>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>08103</td>\n",
       "      <td>43</td>\n",
       "      <td>No weather impact</td>\n",
       "      <td>33</td>\n",
       "      <td>4237</td>\n",
       "      <td>L33/H46/A41/P0.27/Cloudy/Pleasant             ...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7071 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      OperatingDate           Park Name Zipcode  High Temp  \\\n",
       "0        2015-01-01           Dollywood   37863         44   \n",
       "3        2015-01-01    Newport Aquarium   41071         32   \n",
       "4        2015-01-01  Adventure Aquarium   08103         35   \n",
       "5        2015-01-02           Dollywood   37863         46   \n",
       "8        2015-01-02    Newport Aquarium   41071         37   \n",
       "...             ...                 ...     ...        ...   \n",
       "10529    2019-12-28  Adventure Aquarium   08103         54   \n",
       "10530    2019-12-29  Silver Dollar City   65616         53   \n",
       "10531    2019-12-29           Dollywood   37863         78   \n",
       "10536    2019-12-29    Newport Aquarium   41071         60   \n",
       "10537    2019-12-29  Adventure Aquarium   08103         43   \n",
       "\n",
       "                    cyImpactName  Low Temp  Total Attendance  \\\n",
       "0              No weather impact        26             15889   \n",
       "3              No weather impact        21              2224   \n",
       "4              No weather impact        27              3031   \n",
       "5              No weather impact        41              6618   \n",
       "8              No weather impact        30              3228   \n",
       "...                          ...       ...               ...   \n",
       "10529  No weather impact                36              3864   \n",
       "10530  No weather impact                38             21400   \n",
       "10531  Both precipitation/temp          50             20977   \n",
       "10536  Unfavorable temperature          55              3340   \n",
       "10537  No weather impact                33              4237   \n",
       "\n",
       "                                              cyWeather1  \\\n",
       "0                     L26/H45/A35/Partly Cloudy/Pleasant   \n",
       "3                     L21/H39/A29/Partly Cloudy/Pleasant   \n",
       "4                      L27/H41/A34/Mostly Sunny/Pleasant   \n",
       "5               L41/H45/A44/P0.02/Mostly Cloudy/Pleasant   \n",
       "8                     L30/H39/A35/Partly Cloudy/Pleasant   \n",
       "...                                                  ...   \n",
       "10529  L36/H55/A44/Mostly Sunny/Pleasant             ...   \n",
       "10530  L38/H54/A48/Mostly Cloudy/Pleasant            ...   \n",
       "10531  L50/H77/A64/P0.37/Partly Cloudy/Pleasant      ...   \n",
       "10536  L55/H61/A57/P1.13/Cloudy/Pleasant             ...   \n",
       "10537  L33/H46/A41/P0.27/Cloudy/Pleasant             ...   \n",
       "\n",
       "                                              cyWeather2  \n",
       "0                                                    NaN  \n",
       "3                                                    NaN  \n",
       "4                                                    NaN  \n",
       "5                                                    NaN  \n",
       "8                                                    NaN  \n",
       "...                                                  ...  \n",
       "10529                                                ...  \n",
       "10530  Cloudy                                        ...  \n",
       "10531  Substantial Heavy Rain/Some Hot Temps         ...  \n",
       "10536  Some Hot Temps                                ...  \n",
       "10537                                                ...  \n",
       "\n",
       "[7071 rows x 9 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#renaming the columns\n",
    "\n",
    "finaldata.rename(columns={\"cyTotal\": \"Total Attendance\", \"cyHighTemperature\": \"High Temp\", \"cyLowTemperature\": \"Low Temp\", \n",
    "                          \"UnitName\": \"Park Name\"},inplace=True)\n",
    "finaldata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "41071    1824\n",
       "08103    1824\n",
       "37863    1817\n",
       "65616    1606\n",
       "Name: Zipcode, dtype: int64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finaldata[\"Zipcode\"].value_counts()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Adventure Aquarium          1824\n",
       "Newport Aquarium            1824\n",
       "Dollywood                   1307\n",
       "Silver Dollar City          1147\n",
       "Dollywood Splash Country     510\n",
       "White Water                  459\n",
       "Name: Park Name, dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finaldata[\"Park Name\"].value_counts()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OperatingDate</th>\n",
       "      <th>Park Name</th>\n",
       "      <th>Zipcode</th>\n",
       "      <th>Total Attendance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Dollywood</td>\n",
       "      <td>37863</td>\n",
       "      <td>15889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>41071</td>\n",
       "      <td>2224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>08103</td>\n",
       "      <td>3031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>Dollywood</td>\n",
       "      <td>37863</td>\n",
       "      <td>6618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>41071</td>\n",
       "      <td>3228</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  OperatingDate           Park Name Zipcode  Total Attendance\n",
       "0    2015-01-01           Dollywood   37863             15889\n",
       "3    2015-01-01    Newport Aquarium   41071              2224\n",
       "4    2015-01-01  Adventure Aquarium   08103              3031\n",
       "5    2015-01-02           Dollywood   37863              6618\n",
       "8    2015-01-02    Newport Aquarium   41071              3228"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finaldata = finaldata.drop(columns=['cyImpactName', 'cyWeather1', 'cyWeather2','High Temp','Low Temp'])\n",
    "finaldata.head()\n",
    "# df_08103 = df_08103.drop(columns=['maxtempC', 'mintempC', 'totalSnow_cm','totalSnowMM', 'precipMM'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OperatingDate</th>\n",
       "      <th>Park Name</th>\n",
       "      <th>Zipcode</th>\n",
       "      <th>Total Attendance</th>\n",
       "      <th>Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Dollywood</td>\n",
       "      <td>37863</td>\n",
       "      <td>15889</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>41071</td>\n",
       "      <td>2224</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>08103</td>\n",
       "      <td>3031</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>Dollywood</td>\n",
       "      <td>37863</td>\n",
       "      <td>6618</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>41071</td>\n",
       "      <td>3228</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  OperatingDate           Park Name Zipcode  Total Attendance  Year\n",
       "0    2015-01-01           Dollywood   37863             15889  2015\n",
       "3    2015-01-01    Newport Aquarium   41071              2224  2015\n",
       "4    2015-01-01  Adventure Aquarium   08103              3031  2015\n",
       "5    2015-01-02           Dollywood   37863              6618  2015\n",
       "8    2015-01-02    Newport Aquarium   41071              3228  2015"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finaldata['Year'] = finaldata['OperatingDate'].dt.year\n",
    "finaldata.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "Retrieving weather data for 37863\n",
      "\n",
      "\n",
      "Currently retrieving data for 37863: from 2015-01-01 to 2015-01-31\n"
     ]
    },
    {
     "ename": "HTTPError",
     "evalue": "HTTP Error 429: Too Many Requests",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mHTTPError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-36-d96842fba023>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     13\u001b[0m                                 \u001b[0mlocation_label\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m                                 \u001b[0mexport_csv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m                                 store_df = True)\n\u001b[0m",
      "\u001b[0;32m//anaconda3/lib/python3.7/site-packages/wwo_hist/__init__.py\u001b[0m in \u001b[0;36mretrieve_hist_data\u001b[0;34m(api_key, location_list, start_date, end_date, frequency, location_label, export_csv, store_df)\u001b[0m\n\u001b[1;32m    104\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mlocation\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlocation_list\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    105\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'\\n\\nRetrieving weather data for '\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mlocation\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m'\\n\\n'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 106\u001b[0;31m         \u001b[0mdf_this_city\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mretrieve_this_location\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mapi_key\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlocation\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mstart_date\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mend_date\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mfrequency\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    107\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    108\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlocation_label\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/site-packages/wwo_hist/__init__.py\u001b[0m in \u001b[0;36mretrieve_this_location\u001b[0;34m(api_key, location, start_date, end_date, frequency)\u001b[0m\n\u001b[1;32m     87\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     88\u001b[0m         \u001b[0murl_page\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'http://api.worldweatheronline.com/premium/v1/past-weather.ashx?key='\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mapi_key\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m'&q='\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mlocation\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m'&format=json&date='\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mstart_d\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m'&enddate='\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mend_d\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m'&tp='\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfrequency\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 89\u001b[0;31m         \u001b[0mjson_page\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0murllib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0murlopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl_page\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     90\u001b[0m         \u001b[0mjson_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloads\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjson_page\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     91\u001b[0m         \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mjson_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'data'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'weather'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36murlopen\u001b[0;34m(url, data, timeout, cafile, capath, cadefault, context)\u001b[0m\n\u001b[1;32m    220\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    221\u001b[0m         \u001b[0mopener\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_opener\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 222\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mopener\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    223\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    224\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0minstall_opener\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mopener\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(self, fullurl, data, timeout)\u001b[0m\n\u001b[1;32m    529\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mprocessor\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprocess_response\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprotocol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    530\u001b[0m             \u001b[0mmeth\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprocessor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeth_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 531\u001b[0;31m             \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmeth\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    532\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    533\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mhttp_response\u001b[0;34m(self, request, response)\u001b[0m\n\u001b[1;32m    639\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m200\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0mcode\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m300\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    640\u001b[0m             response = self.parent.error(\n\u001b[0;32m--> 641\u001b[0;31m                 'http', request, response, code, msg, hdrs)\n\u001b[0m\u001b[1;32m    642\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    643\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36merror\u001b[0;34m(self, proto, *args)\u001b[0m\n\u001b[1;32m    567\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mhttp_err\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    568\u001b[0m             \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mdict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'default'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'http_error_default'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0morig_args\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 569\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_chain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    570\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    571\u001b[0m \u001b[0;31m# XXX probably also want an abstract factory that knows when it makes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_call_chain\u001b[0;34m(self, chain, kind, meth_name, *args)\u001b[0m\n\u001b[1;32m    501\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhandler\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mhandlers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    502\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeth_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 503\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    504\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    505\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mhttp_error_default\u001b[0;34m(self, req, fp, code, msg, hdrs)\u001b[0m\n\u001b[1;32m    647\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mHTTPDefaultErrorHandler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mBaseHandler\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    648\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mhttp_error_default\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmsg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhdrs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 649\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mHTTPError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfull_url\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmsg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhdrs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    650\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    651\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mHTTPRedirectHandler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mBaseHandler\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mHTTPError\u001b[0m: HTTP Error 429: Too Many Requests"
     ]
    }
   ],
   "source": [
    "#Api calls\n",
    "frequency=24\n",
    "start_date = '01-JAN-2015'\n",
    "end_date = '31-DEC-2019'\n",
    "api_key = 'YOUR_API_KEY'\n",
    "location_list = ['37863',\"65616\",'08103','41071']\n",
    "\n",
    "hist_weather_data = retrieve_hist_data(api,\n",
    "                                location_list,\n",
    "                                start_date,\n",
    "                                end_date,\n",
    "                                frequency,\n",
    "                                location_label = False,\n",
    "                                export_csv = True,\n",
    "                                store_df = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "#read api generated csv file for one Zip code and generate data frame\n",
    "df_08103 = pd.read_csv(\"08103.csv\",\n",
    "                   parse_dates=[0])\n",
    "del df_08103['sunHour']\n",
    "del df_08103['uvIndex']\n",
    "del df_08103['uvIndex.1']\n",
    "del df_08103['moon_illumination']\n",
    "\n",
    "del df_08103['moonrise']\n",
    "del df_08103['moonset']\n",
    "del df_08103['sunrise']\n",
    "del df_08103['sunset'] \n",
    "del df_08103['DewPointC']\n",
    "del df_08103['FeelsLikeC']\n",
    "del df_08103['HeatIndexC']\n",
    "del df_08103['WindChillC']\n",
    "del df_08103['WindGustKmph']\n",
    "del df_08103['cloudcover']\n",
    "del df_08103['humidity']\n",
    "del df_08103['pressure']            \n",
    "del df_08103['tempC']                \n",
    "del df_08103['visibility']           \n",
    "del df_08103['winddirDegree']        \n",
    "del df_08103['windspeedKmph']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_time</th>\n",
       "      <th>maxtempC</th>\n",
       "      <th>mintempC</th>\n",
       "      <th>totalSnow_cm</th>\n",
       "      <th>precipMM</th>\n",
       "      <th>maxtempF</th>\n",
       "      <th>mintempF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>4</td>\n",
       "      <td>-4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>39.2</td>\n",
       "      <td>24.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>5</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>30.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-03</td>\n",
       "      <td>5</td>\n",
       "      <td>-2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.6</td>\n",
       "      <td>41.0</td>\n",
       "      <td>28.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-04</td>\n",
       "      <td>14</td>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.9</td>\n",
       "      <td>57.2</td>\n",
       "      <td>41.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-05</td>\n",
       "      <td>6</td>\n",
       "      <td>-4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>42.8</td>\n",
       "      <td>24.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1852</th>\n",
       "      <td>2019-12-27</td>\n",
       "      <td>10</td>\n",
       "      <td>6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>42.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1853</th>\n",
       "      <td>2019-12-28</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>44.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1854</th>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.8</td>\n",
       "      <td>48.2</td>\n",
       "      <td>33.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1855</th>\n",
       "      <td>2019-12-30</td>\n",
       "      <td>15</td>\n",
       "      <td>8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.6</td>\n",
       "      <td>59.0</td>\n",
       "      <td>46.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1856</th>\n",
       "      <td>2019-12-31</td>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.1</td>\n",
       "      <td>50.0</td>\n",
       "      <td>39.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1857 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      date_time  maxtempC  mintempC  totalSnow_cm  precipMM  maxtempF  \\\n",
       "0    2015-01-01         4        -4           0.0       0.0      39.2   \n",
       "1    2015-01-02         5        -1           0.0       0.0      41.0   \n",
       "2    2015-01-03         5        -2           0.0       0.6      41.0   \n",
       "3    2015-01-04        14         5           0.0       0.9      57.2   \n",
       "4    2015-01-05         6        -4           0.0       0.0      42.8   \n",
       "...         ...       ...       ...           ...       ...       ...   \n",
       "1852 2019-12-27        10         6           0.0       0.0      50.0   \n",
       "1853 2019-12-28        10         7           0.0       0.0      50.0   \n",
       "1854 2019-12-29         9         1           0.0       5.8      48.2   \n",
       "1855 2019-12-30        15         8           0.0       8.6      59.0   \n",
       "1856 2019-12-31        10         4           0.0       0.1      50.0   \n",
       "\n",
       "      mintempF  \n",
       "0         24.8  \n",
       "1         30.2  \n",
       "2         28.4  \n",
       "3         41.0  \n",
       "4         24.8  \n",
       "...        ...  \n",
       "1852      42.8  \n",
       "1853      44.6  \n",
       "1854      33.8  \n",
       "1855      46.4  \n",
       "1856      39.2  \n",
       "\n",
       "[1857 rows x 7 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Convert max and min temp columns to Fahrenheit\n",
    "\n",
    "def cel_to_fahr(temp_cels):\n",
    "    temp_fahr = (temp_cels * 9 / 5 + 32)\n",
    "    return temp_fahr\n",
    "\n",
    "#run the function to see if it works\n",
    "cel_to_fahr(df_08103[\"maxtempC\"])\n",
    "cel_to_fahr(df_08103[\"mintempC\"])\n",
    "\n",
    "#add the maxtempF column to DF\n",
    "df_08103[\"maxtempF\"] = cel_to_fahr(df_08103[\"maxtempC\"])\n",
    "\n",
    "#Add the mintempF column to DF\n",
    "df_08103[\"mintempF\"] = cel_to_fahr(df_08103[\"mintempC\"])\n",
    "\n",
    "#display the final df\n",
    "df_08103"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_time</th>\n",
       "      <th>maxtempC</th>\n",
       "      <th>mintempC</th>\n",
       "      <th>totalSnow_cm</th>\n",
       "      <th>precipMM</th>\n",
       "      <th>maxtempF</th>\n",
       "      <th>mintempF</th>\n",
       "      <th>totalSnowMM</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>4</td>\n",
       "      <td>-4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>39.2</td>\n",
       "      <td>24.8</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>5</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>30.2</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-03</td>\n",
       "      <td>5</td>\n",
       "      <td>-2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.6</td>\n",
       "      <td>41.0</td>\n",
       "      <td>28.4</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-04</td>\n",
       "      <td>14</td>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.9</td>\n",
       "      <td>57.2</td>\n",
       "      <td>41.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-05</td>\n",
       "      <td>6</td>\n",
       "      <td>-4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>42.8</td>\n",
       "      <td>24.8</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   date_time  maxtempC  mintempC  totalSnow_cm  precipMM  maxtempF  mintempF  \\\n",
       "0 2015-01-01         4        -4           0.0       0.0      39.2      24.8   \n",
       "1 2015-01-02         5        -1           0.0       0.0      41.0      30.2   \n",
       "2 2015-01-03         5        -2           0.0       0.6      41.0      28.4   \n",
       "3 2015-01-04        14         5           0.0       0.9      57.2      41.0   \n",
       "4 2015-01-05         6        -4           0.0       0.0      42.8      24.8   \n",
       "\n",
       "   totalSnowMM  \n",
       "0          0.0  \n",
       "1          0.0  \n",
       "2          0.0  \n",
       "3          0.0  \n",
       "4          0.0  "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#convert total snow column to mm\n",
    "def cm_to_mm(prec_cm):\n",
    "    prec_mm = (prec_cm / 10)\n",
    "    return prec_mm\n",
    "\n",
    "#run the function to see if it works\n",
    "cm_to_mm(df_08103[\"totalSnow_cm\"])\n",
    "\n",
    "#add the maxtempF column to DF\n",
    "df_08103[\"totalSnowMM\"] = cm_to_mm(df_08103[\"totalSnow_cm\"])\n",
    "\n",
    "df_08103.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_time</th>\n",
       "      <th>maxtempC</th>\n",
       "      <th>mintempC</th>\n",
       "      <th>totalSnow_cm</th>\n",
       "      <th>precipMM</th>\n",
       "      <th>maxtempF</th>\n",
       "      <th>mintempF</th>\n",
       "      <th>totalSnowMM</th>\n",
       "      <th>precip</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>4</td>\n",
       "      <td>-4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>39.2</td>\n",
       "      <td>24.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>5</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>30.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-03</td>\n",
       "      <td>5</td>\n",
       "      <td>-2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.6</td>\n",
       "      <td>41.0</td>\n",
       "      <td>28.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-04</td>\n",
       "      <td>14</td>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.9</td>\n",
       "      <td>57.2</td>\n",
       "      <td>41.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-05</td>\n",
       "      <td>6</td>\n",
       "      <td>-4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>42.8</td>\n",
       "      <td>24.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   date_time  maxtempC  mintempC  totalSnow_cm  precipMM  maxtempF  mintempF  \\\n",
       "0 2015-01-01         4        -4           0.0       0.0      39.2      24.8   \n",
       "1 2015-01-02         5        -1           0.0       0.0      41.0      30.2   \n",
       "2 2015-01-03         5        -2           0.0       0.6      41.0      28.4   \n",
       "3 2015-01-04        14         5           0.0       0.9      57.2      41.0   \n",
       "4 2015-01-05         6        -4           0.0       0.0      42.8      24.8   \n",
       "\n",
       "   totalSnowMM  precip  \n",
       "0          0.0     0.0  \n",
       "1          0.0     0.0  \n",
       "2          0.0     0.6  \n",
       "3          0.0     0.9  \n",
       "4          0.0     0.0  "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#add the values in precipMM and totalSnowMM columns\n",
    "df_08103['precip']=df_08103['precipMM'] + df_08103['totalSnowMM']\n",
    "\n",
    "df_08103.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_time</th>\n",
       "      <th>maxtempF</th>\n",
       "      <th>mintempF</th>\n",
       "      <th>precip</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>39.2</td>\n",
       "      <td>24.8</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>41.0</td>\n",
       "      <td>30.2</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-03</td>\n",
       "      <td>41.0</td>\n",
       "      <td>28.4</td>\n",
       "      <td>0.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-04</td>\n",
       "      <td>57.2</td>\n",
       "      <td>41.0</td>\n",
       "      <td>0.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-05</td>\n",
       "      <td>42.8</td>\n",
       "      <td>24.8</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1852</th>\n",
       "      <td>2019-12-27</td>\n",
       "      <td>50.0</td>\n",
       "      <td>42.8</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1853</th>\n",
       "      <td>2019-12-28</td>\n",
       "      <td>50.0</td>\n",
       "      <td>44.6</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1854</th>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>48.2</td>\n",
       "      <td>33.8</td>\n",
       "      <td>5.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1855</th>\n",
       "      <td>2019-12-30</td>\n",
       "      <td>59.0</td>\n",
       "      <td>46.4</td>\n",
       "      <td>8.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1856</th>\n",
       "      <td>2019-12-31</td>\n",
       "      <td>50.0</td>\n",
       "      <td>39.2</td>\n",
       "      <td>0.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1857 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      date_time  maxtempF  mintempF  precip\n",
       "0    2015-01-01      39.2      24.8     0.0\n",
       "1    2015-01-02      41.0      30.2     0.0\n",
       "2    2015-01-03      41.0      28.4     0.6\n",
       "3    2015-01-04      57.2      41.0     0.9\n",
       "4    2015-01-05      42.8      24.8     0.0\n",
       "...         ...       ...       ...     ...\n",
       "1852 2019-12-27      50.0      42.8     0.0\n",
       "1853 2019-12-28      50.0      44.6     0.0\n",
       "1854 2019-12-29      48.2      33.8     5.8\n",
       "1855 2019-12-30      59.0      46.4     8.6\n",
       "1856 2019-12-31      50.0      39.2     0.1\n",
       "\n",
       "[1857 rows x 4 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#lets drop the celsius columns and snow columns since we added snow and precipMM to a new precip column\n",
    "df_08103 = df_08103.drop(columns=['maxtempC', 'mintempC', 'totalSnow_cm','totalSnowMM', 'precipMM'])\n",
    "\n",
    "df_08103"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_time</th>\n",
       "      <th>maxtempF</th>\n",
       "      <th>mintempF</th>\n",
       "      <th>precip</th>\n",
       "      <th>Zipcode</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>39.2</td>\n",
       "      <td>24.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>08103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>41.0</td>\n",
       "      <td>30.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>08103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-03</td>\n",
       "      <td>41.0</td>\n",
       "      <td>28.4</td>\n",
       "      <td>0.6</td>\n",
       "      <td>08103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-04</td>\n",
       "      <td>57.2</td>\n",
       "      <td>41.0</td>\n",
       "      <td>0.9</td>\n",
       "      <td>08103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-05</td>\n",
       "      <td>42.8</td>\n",
       "      <td>24.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>08103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1852</th>\n",
       "      <td>2019-12-27</td>\n",
       "      <td>50.0</td>\n",
       "      <td>42.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>08103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1853</th>\n",
       "      <td>2019-12-28</td>\n",
       "      <td>50.0</td>\n",
       "      <td>44.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>08103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1854</th>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>48.2</td>\n",
       "      <td>33.8</td>\n",
       "      <td>5.8</td>\n",
       "      <td>08103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1855</th>\n",
       "      <td>2019-12-30</td>\n",
       "      <td>59.0</td>\n",
       "      <td>46.4</td>\n",
       "      <td>8.6</td>\n",
       "      <td>08103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1856</th>\n",
       "      <td>2019-12-31</td>\n",
       "      <td>50.0</td>\n",
       "      <td>39.2</td>\n",
       "      <td>0.1</td>\n",
       "      <td>08103</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1857 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      date_time  maxtempF  mintempF  precip Zipcode\n",
       "0    2015-01-01      39.2      24.8     0.0   08103\n",
       "1    2015-01-02      41.0      30.2     0.0   08103\n",
       "2    2015-01-03      41.0      28.4     0.6   08103\n",
       "3    2015-01-04      57.2      41.0     0.9   08103\n",
       "4    2015-01-05      42.8      24.8     0.0   08103\n",
       "...         ...       ...       ...     ...     ...\n",
       "1852 2019-12-27      50.0      42.8     0.0   08103\n",
       "1853 2019-12-28      50.0      44.6     0.0   08103\n",
       "1854 2019-12-29      48.2      33.8     5.8   08103\n",
       "1855 2019-12-30      59.0      46.4     8.6   08103\n",
       "1856 2019-12-31      50.0      39.2     0.1   08103\n",
       "\n",
       "[1857 rows x 5 columns]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_08103['Zipcode'] = \"08103\"\n",
    "df_08103\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OperatingDate</th>\n",
       "      <th>maxtempF</th>\n",
       "      <th>mintempF</th>\n",
       "      <th>precip</th>\n",
       "      <th>Zipcode</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>39.2</td>\n",
       "      <td>24.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>08103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>41.0</td>\n",
       "      <td>30.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>08103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-03</td>\n",
       "      <td>41.0</td>\n",
       "      <td>28.4</td>\n",
       "      <td>0.6</td>\n",
       "      <td>08103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-04</td>\n",
       "      <td>57.2</td>\n",
       "      <td>41.0</td>\n",
       "      <td>0.9</td>\n",
       "      <td>08103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-05</td>\n",
       "      <td>42.8</td>\n",
       "      <td>24.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>08103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1852</th>\n",
       "      <td>2019-12-27</td>\n",
       "      <td>50.0</td>\n",
       "      <td>42.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>08103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1853</th>\n",
       "      <td>2019-12-28</td>\n",
       "      <td>50.0</td>\n",
       "      <td>44.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>08103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1854</th>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>48.2</td>\n",
       "      <td>33.8</td>\n",
       "      <td>5.8</td>\n",
       "      <td>08103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1855</th>\n",
       "      <td>2019-12-30</td>\n",
       "      <td>59.0</td>\n",
       "      <td>46.4</td>\n",
       "      <td>8.6</td>\n",
       "      <td>08103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1856</th>\n",
       "      <td>2019-12-31</td>\n",
       "      <td>50.0</td>\n",
       "      <td>39.2</td>\n",
       "      <td>0.1</td>\n",
       "      <td>08103</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1857 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     OperatingDate  maxtempF  mintempF  precip Zipcode\n",
       "0       2015-01-01      39.2      24.8     0.0   08103\n",
       "1       2015-01-02      41.0      30.2     0.0   08103\n",
       "2       2015-01-03      41.0      28.4     0.6   08103\n",
       "3       2015-01-04      57.2      41.0     0.9   08103\n",
       "4       2015-01-05      42.8      24.8     0.0   08103\n",
       "...            ...       ...       ...     ...     ...\n",
       "1852    2019-12-27      50.0      42.8     0.0   08103\n",
       "1853    2019-12-28      50.0      44.6     0.0   08103\n",
       "1854    2019-12-29      48.2      33.8     5.8   08103\n",
       "1855    2019-12-30      59.0      46.4     8.6   08103\n",
       "1856    2019-12-31      50.0      39.2     0.1   08103\n",
       "\n",
       "[1857 rows x 5 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_08103.rename(columns={\"date_time\": \"OperatingDate\"},inplace=True)\n",
    "df_08103"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OperatingDate</th>\n",
       "      <th>maxtempF</th>\n",
       "      <th>mintempF</th>\n",
       "      <th>precip</th>\n",
       "      <th>Zipcode</th>\n",
       "      <th>Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>39.2</td>\n",
       "      <td>24.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>08103</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>41.0</td>\n",
       "      <td>30.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>08103</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-03</td>\n",
       "      <td>41.0</td>\n",
       "      <td>28.4</td>\n",
       "      <td>0.6</td>\n",
       "      <td>08103</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-04</td>\n",
       "      <td>57.2</td>\n",
       "      <td>41.0</td>\n",
       "      <td>0.9</td>\n",
       "      <td>08103</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-05</td>\n",
       "      <td>42.8</td>\n",
       "      <td>24.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>08103</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1852</th>\n",
       "      <td>2019-12-27</td>\n",
       "      <td>50.0</td>\n",
       "      <td>42.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>08103</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1853</th>\n",
       "      <td>2019-12-28</td>\n",
       "      <td>50.0</td>\n",
       "      <td>44.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>08103</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1854</th>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>48.2</td>\n",
       "      <td>33.8</td>\n",
       "      <td>5.8</td>\n",
       "      <td>08103</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1855</th>\n",
       "      <td>2019-12-30</td>\n",
       "      <td>59.0</td>\n",
       "      <td>46.4</td>\n",
       "      <td>8.6</td>\n",
       "      <td>08103</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1856</th>\n",
       "      <td>2019-12-31</td>\n",
       "      <td>50.0</td>\n",
       "      <td>39.2</td>\n",
       "      <td>0.1</td>\n",
       "      <td>08103</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1857 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     OperatingDate  maxtempF  mintempF  precip Zipcode  Year\n",
       "0       2015-01-01      39.2      24.8     0.0   08103  2015\n",
       "1       2015-01-02      41.0      30.2     0.0   08103  2015\n",
       "2       2015-01-03      41.0      28.4     0.6   08103  2015\n",
       "3       2015-01-04      57.2      41.0     0.9   08103  2015\n",
       "4       2015-01-05      42.8      24.8     0.0   08103  2015\n",
       "...            ...       ...       ...     ...     ...   ...\n",
       "1852    2019-12-27      50.0      42.8     0.0   08103  2019\n",
       "1853    2019-12-28      50.0      44.6     0.0   08103  2019\n",
       "1854    2019-12-29      48.2      33.8     5.8   08103  2019\n",
       "1855    2019-12-30      59.0      46.4     8.6   08103  2019\n",
       "1856    2019-12-31      50.0      39.2     0.1   08103  2019\n",
       "\n",
       "[1857 rows x 6 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_08103['Year'] = df_08103['OperatingDate'].dt.year\n",
    "df_08103"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OperatingDate</th>\n",
       "      <th>maxtempF</th>\n",
       "      <th>mintempF</th>\n",
       "      <th>precip</th>\n",
       "      <th>Zipcode</th>\n",
       "      <th>Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>46.4</td>\n",
       "      <td>26.6</td>\n",
       "      <td>0.10</td>\n",
       "      <td>37863</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>46.4</td>\n",
       "      <td>35.6</td>\n",
       "      <td>0.50</td>\n",
       "      <td>37863</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-03</td>\n",
       "      <td>62.6</td>\n",
       "      <td>41.0</td>\n",
       "      <td>0.60</td>\n",
       "      <td>37863</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-04</td>\n",
       "      <td>57.2</td>\n",
       "      <td>39.2</td>\n",
       "      <td>7.80</td>\n",
       "      <td>37863</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-05</td>\n",
       "      <td>35.6</td>\n",
       "      <td>26.6</td>\n",
       "      <td>0.11</td>\n",
       "      <td>37863</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1852</th>\n",
       "      <td>2019-12-27</td>\n",
       "      <td>62.6</td>\n",
       "      <td>46.4</td>\n",
       "      <td>0.00</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1853</th>\n",
       "      <td>2019-12-28</td>\n",
       "      <td>64.4</td>\n",
       "      <td>46.4</td>\n",
       "      <td>0.00</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1854</th>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>69.8</td>\n",
       "      <td>51.8</td>\n",
       "      <td>0.30</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1855</th>\n",
       "      <td>2019-12-30</td>\n",
       "      <td>53.6</td>\n",
       "      <td>37.4</td>\n",
       "      <td>4.80</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1856</th>\n",
       "      <td>2019-12-31</td>\n",
       "      <td>44.6</td>\n",
       "      <td>37.4</td>\n",
       "      <td>0.20</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1857 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     OperatingDate  maxtempF  mintempF  precip Zipcode  Year\n",
       "0       2015-01-01      46.4      26.6    0.10   37863  2015\n",
       "1       2015-01-02      46.4      35.6    0.50   37863  2015\n",
       "2       2015-01-03      62.6      41.0    0.60   37863  2015\n",
       "3       2015-01-04      57.2      39.2    7.80   37863  2015\n",
       "4       2015-01-05      35.6      26.6    0.11   37863  2015\n",
       "...            ...       ...       ...     ...     ...   ...\n",
       "1852    2019-12-27      62.6      46.4    0.00   37863  2019\n",
       "1853    2019-12-28      64.4      46.4    0.00   37863  2019\n",
       "1854    2019-12-29      69.8      51.8    0.30   37863  2019\n",
       "1855    2019-12-30      53.6      37.4    4.80   37863  2019\n",
       "1856    2019-12-31      44.6      37.4    0.20   37863  2019\n",
       "\n",
       "[1857 rows x 6 columns]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#read api generated csv file\n",
    "df_37863 = pd.read_csv(\"37863.csv\",\n",
    "                   parse_dates=[0])\n",
    "del df_37863['sunHour']\n",
    "del df_37863['uvIndex']\n",
    "del df_37863['uvIndex.1']\n",
    "del df_37863['moon_illumination']\n",
    "\n",
    "del df_37863['moonrise']\n",
    "del df_37863['moonset']\n",
    "del df_37863['sunrise']\n",
    "del df_37863['sunset'] \n",
    "del df_37863['DewPointC']\n",
    "del df_37863['FeelsLikeC']\n",
    "del df_37863['HeatIndexC']\n",
    "del df_37863['WindChillC']\n",
    "del df_37863['WindGustKmph']\n",
    "del df_37863['cloudcover']\n",
    "del df_37863['humidity']\n",
    "del df_37863['pressure']            \n",
    "del df_37863['tempC']                \n",
    "del df_37863['visibility']           \n",
    "del df_37863['winddirDegree']        \n",
    "del df_37863['windspeedKmph']\n",
    "def cel_to_fahr(temp_cels):\n",
    "    temp_fahr = (temp_cels * 9 / 5 + 32)\n",
    "    return temp_fahr\n",
    "\n",
    "#run the function to see if it works\n",
    "cel_to_fahr(df_37863[\"maxtempC\"])\n",
    "cel_to_fahr(df_37863[\"mintempC\"])\n",
    "\n",
    "#add the maxtempF column to DF\n",
    "df_37863[\"maxtempF\"] = cel_to_fahr(df_37863[\"maxtempC\"])\n",
    "\n",
    "#Add the mintempF column to DF\n",
    "df_37863[\"mintempF\"] = cel_to_fahr(df_37863[\"mintempC\"])\n",
    "\n",
    "#display the final df\n",
    "df_37863\n",
    "#convert total snow column to mm\n",
    "def cm_to_mm(prec_cm):\n",
    "    prec_mm = (prec_cm / 10)\n",
    "    return prec_mm\n",
    "\n",
    "#run the function to see if it works\n",
    "cm_to_mm(df_37863[\"totalSnow_cm\"])\n",
    "\n",
    "#add the maxtempF column to DF\n",
    "df_37863[\"totalSnowMM\"] = cm_to_mm(df_37863[\"totalSnow_cm\"])\n",
    "\n",
    "df_37863.head()\n",
    "#add the values in precipMM and totalSnowMM columns\n",
    "df_37863['precip']=df_37863['precipMM'] + df_37863['totalSnowMM']\n",
    "\n",
    "df_37863.head()\n",
    "#lets drop the celsius columns and snow columns since we added snow and precipMM to a new precip column\n",
    "df_37863 = df_37863.drop(columns=['maxtempC', 'mintempC', 'totalSnow_cm','totalSnowMM', 'precipMM'])\n",
    "\n",
    "df_37863\n",
    "df_37863['Zipcode'] = \"37863\"\n",
    "df_37863.rename(columns={\"date_time\": \"OperatingDate\"},inplace=True)\n",
    "df_37863['Year'] = df_37863['OperatingDate'].dt.year\n",
    "df_37863"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OperatingDate</th>\n",
       "      <th>maxtempF</th>\n",
       "      <th>mintempF</th>\n",
       "      <th>precip</th>\n",
       "      <th>Zipcode</th>\n",
       "      <th>Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>33.8</td>\n",
       "      <td>24.8</td>\n",
       "      <td>3.4</td>\n",
       "      <td>65616</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>41.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>65616</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-03</td>\n",
       "      <td>46.4</td>\n",
       "      <td>37.4</td>\n",
       "      <td>5.6</td>\n",
       "      <td>65616</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-04</td>\n",
       "      <td>37.4</td>\n",
       "      <td>19.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>65616</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-05</td>\n",
       "      <td>35.6</td>\n",
       "      <td>17.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>65616</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1852</th>\n",
       "      <td>2019-12-27</td>\n",
       "      <td>55.4</td>\n",
       "      <td>42.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>65616</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1853</th>\n",
       "      <td>2019-12-28</td>\n",
       "      <td>59.0</td>\n",
       "      <td>48.2</td>\n",
       "      <td>20.2</td>\n",
       "      <td>65616</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1854</th>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>53.6</td>\n",
       "      <td>35.6</td>\n",
       "      <td>20.2</td>\n",
       "      <td>65616</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1855</th>\n",
       "      <td>2019-12-30</td>\n",
       "      <td>39.2</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>65616</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1856</th>\n",
       "      <td>2019-12-31</td>\n",
       "      <td>44.6</td>\n",
       "      <td>30.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>65616</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1857 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     OperatingDate  maxtempF  mintempF  precip Zipcode  Year\n",
       "0       2015-01-01      33.8      24.8     3.4   65616  2015\n",
       "1       2015-01-02      41.0      32.0     4.9   65616  2015\n",
       "2       2015-01-03      46.4      37.4     5.6   65616  2015\n",
       "3       2015-01-04      37.4      19.4     0.0   65616  2015\n",
       "4       2015-01-05      35.6      17.6     0.0   65616  2015\n",
       "...            ...       ...       ...     ...     ...   ...\n",
       "1852    2019-12-27      55.4      42.8     0.0   65616  2019\n",
       "1853    2019-12-28      59.0      48.2    20.2   65616  2019\n",
       "1854    2019-12-29      53.6      35.6    20.2   65616  2019\n",
       "1855    2019-12-30      39.2      32.0     0.0   65616  2019\n",
       "1856    2019-12-31      44.6      30.2     0.0   65616  2019\n",
       "\n",
       "[1857 rows x 6 columns]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#read api generated csv file\n",
    "# df_65616 = pd.read_csv(\"65616.csv\",\n",
    "#                   index_col=[0], parse_dates=[0])\n",
    "df_65616 = pd.read_csv(\"65616.csv\",\n",
    "                   parse_dates=[0])\n",
    "del df_65616 ['sunHour']\n",
    "del df_65616 ['uvIndex']\n",
    "del df_65616 ['uvIndex.1']\n",
    "del df_65616 ['moon_illumination']\n",
    "\n",
    "del df_65616 ['moonrise']\n",
    "del df_65616 ['moonset']\n",
    "del df_65616 ['sunrise']\n",
    "del df_65616 ['sunset'] \n",
    "del df_65616 ['DewPointC']\n",
    "del df_65616 ['FeelsLikeC']\n",
    "del df_65616 ['HeatIndexC']\n",
    "del df_65616 ['WindChillC']\n",
    "del df_65616 ['WindGustKmph']\n",
    "del df_65616 ['cloudcover']\n",
    "del df_65616 ['humidity']\n",
    "del df_65616 ['pressure']            \n",
    "del df_65616 ['tempC']                \n",
    "del df_65616 ['visibility']           \n",
    "del df_65616 ['winddirDegree']        \n",
    "del df_65616 ['windspeedKmph']\n",
    "def cel_to_fahr(temp_cels):\n",
    "    temp_fahr = (temp_cels * 9 / 5 + 32)\n",
    "    return temp_fahr\n",
    "\n",
    "#run the function to see if it works\n",
    "cel_to_fahr(df_65616 [\"maxtempC\"])\n",
    "cel_to_fahr(df_65616 [\"mintempC\"])\n",
    "\n",
    "#add the maxtempF column to DF\n",
    "df_65616 [\"maxtempF\"] = cel_to_fahr(df_65616 [\"maxtempC\"])\n",
    "\n",
    "#Add the mintempF column to DF\n",
    "df_65616 [\"mintempF\"] = cel_to_fahr(df_65616 [\"mintempC\"])\n",
    "\n",
    "#display the final df\n",
    "df_65616 \n",
    "#convert total snow column to mm\n",
    "def cm_to_mm(prec_cm):\n",
    "    prec_mm = (prec_cm / 10)\n",
    "    return prec_mm\n",
    "\n",
    "#run the function to see if it works\n",
    "cm_to_mm(df_65616 [\"totalSnow_cm\"])\n",
    "\n",
    "#add the maxtempF column to DF\n",
    "df_65616 [\"totalSnowMM\"] = cm_to_mm(df_65616 [\"totalSnow_cm\"])\n",
    "\n",
    "#add the values in precipMM and totalSnowMM columns\n",
    "df_65616 ['precip']=df_65616 ['precipMM'] + df_65616 ['totalSnowMM']\n",
    "\n",
    "\n",
    "#lets drop the celsius columns and snow columns since we added snow and precipMM to a new precip column\n",
    "df_65616  = df_65616 .drop(columns=['maxtempC', 'mintempC', 'totalSnow_cm','totalSnowMM', 'precipMM'])\n",
    "\n",
    "df_65616 ['Zipcode'] = \"65616\"\n",
    "df_65616.rename(columns={\"date_time\": \"OperatingDate\"},inplace=True)\n",
    "df_65616['Year'] = df_65616['OperatingDate'].dt.year\n",
    "df_65616"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OperatingDate</th>\n",
       "      <th>maxtempF</th>\n",
       "      <th>mintempF</th>\n",
       "      <th>precip</th>\n",
       "      <th>Zipcode</th>\n",
       "      <th>Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>35.6</td>\n",
       "      <td>21.2</td>\n",
       "      <td>0.00</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>37.4</td>\n",
       "      <td>28.4</td>\n",
       "      <td>0.00</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-03</td>\n",
       "      <td>55.4</td>\n",
       "      <td>33.8</td>\n",
       "      <td>8.90</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-04</td>\n",
       "      <td>55.4</td>\n",
       "      <td>26.6</td>\n",
       "      <td>2.20</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-05</td>\n",
       "      <td>19.4</td>\n",
       "      <td>15.8</td>\n",
       "      <td>0.00</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1852</th>\n",
       "      <td>2019-12-27</td>\n",
       "      <td>59.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0.50</td>\n",
       "      <td>41071</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1853</th>\n",
       "      <td>2019-12-28</td>\n",
       "      <td>55.4</td>\n",
       "      <td>44.6</td>\n",
       "      <td>0.40</td>\n",
       "      <td>41071</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1854</th>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>62.6</td>\n",
       "      <td>53.6</td>\n",
       "      <td>31.70</td>\n",
       "      <td>41071</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1855</th>\n",
       "      <td>2019-12-30</td>\n",
       "      <td>46.4</td>\n",
       "      <td>30.2</td>\n",
       "      <td>12.70</td>\n",
       "      <td>41071</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1856</th>\n",
       "      <td>2019-12-31</td>\n",
       "      <td>33.8</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0.11</td>\n",
       "      <td>41071</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1857 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     OperatingDate  maxtempF  mintempF  precip Zipcode  Year\n",
       "0       2015-01-01      35.6      21.2    0.00   41071  2015\n",
       "1       2015-01-02      37.4      28.4    0.00   41071  2015\n",
       "2       2015-01-03      55.4      33.8    8.90   41071  2015\n",
       "3       2015-01-04      55.4      26.6    2.20   41071  2015\n",
       "4       2015-01-05      19.4      15.8    0.00   41071  2015\n",
       "...            ...       ...       ...     ...     ...   ...\n",
       "1852    2019-12-27      59.0      50.0    0.50   41071  2019\n",
       "1853    2019-12-28      55.4      44.6    0.40   41071  2019\n",
       "1854    2019-12-29      62.6      53.6   31.70   41071  2019\n",
       "1855    2019-12-30      46.4      30.2   12.70   41071  2019\n",
       "1856    2019-12-31      33.8      32.0    0.11   41071  2019\n",
       "\n",
       "[1857 rows x 6 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#read api generated csv file\n",
    "df_41071 = pd.read_csv(\"41071.csv\",\n",
    "                   parse_dates=[0])\n",
    "del df_41071['sunHour']\n",
    "del df_41071['uvIndex']\n",
    "del df_41071['uvIndex.1']\n",
    "del df_41071['moon_illumination']\n",
    "\n",
    "del df_41071['moonrise']\n",
    "del df_41071['moonset']\n",
    "del df_41071['sunrise']\n",
    "del df_41071['sunset'] \n",
    "del df_41071['DewPointC']\n",
    "del df_41071['FeelsLikeC']\n",
    "del df_41071['HeatIndexC']\n",
    "del df_41071['WindChillC']\n",
    "del df_41071['WindGustKmph']\n",
    "del df_41071['cloudcover']\n",
    "del df_41071['humidity']\n",
    "del df_41071['pressure']            \n",
    "del df_41071['tempC']                \n",
    "del df_41071['visibility']           \n",
    "del df_41071['winddirDegree']        \n",
    "del df_41071['windspeedKmph']\n",
    "def cel_to_fahr(temp_cels):\n",
    "    temp_fahr = (temp_cels * 9 / 5 + 32)\n",
    "    return temp_fahr\n",
    "\n",
    "#run the function to see if it works\n",
    "cel_to_fahr(df_41071[\"maxtempC\"])\n",
    "cel_to_fahr(df_41071[\"mintempC\"])\n",
    "\n",
    "#add the maxtempF column to DF\n",
    "df_41071[\"maxtempF\"] = cel_to_fahr(df_41071[\"maxtempC\"])\n",
    "\n",
    "#Add the mintempF column to DF\n",
    "df_41071[\"mintempF\"] = cel_to_fahr(df_41071[\"mintempC\"])\n",
    "\n",
    "#display the final df\n",
    "df_41071\n",
    "#convert total snow column to mm\n",
    "def cm_to_mm(prec_cm):\n",
    "    prec_mm = (prec_cm / 10)\n",
    "    return prec_mm\n",
    "\n",
    "#run the function to see if it works\n",
    "cm_to_mm(df_41071[\"totalSnow_cm\"])\n",
    "\n",
    "#add the maxtempF column to DF\n",
    "df_41071[\"totalSnowMM\"] = cm_to_mm(df_41071[\"totalSnow_cm\"])\n",
    "\n",
    "df_41071.head()\n",
    "#add the values in precipMM and totalSnowMM columns\n",
    "df_41071['precip']=df_41071['precipMM'] + df_41071['totalSnowMM']\n",
    "\n",
    "df_41071.head()\n",
    "#lets drop the celsius columns and snow columns since we added snow and precipMM to a new precip column\n",
    "df_41071 = df_41071.drop(columns=['maxtempC', 'mintempC', 'totalSnow_cm','totalSnowMM', 'precipMM'])\n",
    "\n",
    "df_41071['Zipcode'] = \"41071\"\n",
    "\n",
    "df_41071.rename(columns={\"date_time\": \"OperatingDate\"},inplace=True)\n",
    "df_41071['Year'] = df_41071['OperatingDate'].dt.year\n",
    "\n",
    "df_41071"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "# merged_zip_based.reset_index(drop=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OperatingDate</th>\n",
       "      <th>maxtempF</th>\n",
       "      <th>mintempF</th>\n",
       "      <th>precip</th>\n",
       "      <th>Zipcode</th>\n",
       "      <th>Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>35.6</td>\n",
       "      <td>21.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>37.4</td>\n",
       "      <td>28.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-03</td>\n",
       "      <td>55.4</td>\n",
       "      <td>33.8</td>\n",
       "      <td>8.9</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-04</td>\n",
       "      <td>55.4</td>\n",
       "      <td>26.6</td>\n",
       "      <td>2.2</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-05</td>\n",
       "      <td>19.4</td>\n",
       "      <td>15.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1852</th>\n",
       "      <td>2019-12-27</td>\n",
       "      <td>62.6</td>\n",
       "      <td>46.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1853</th>\n",
       "      <td>2019-12-28</td>\n",
       "      <td>64.4</td>\n",
       "      <td>46.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1854</th>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>69.8</td>\n",
       "      <td>51.8</td>\n",
       "      <td>0.3</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1855</th>\n",
       "      <td>2019-12-30</td>\n",
       "      <td>53.6</td>\n",
       "      <td>37.4</td>\n",
       "      <td>4.8</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1856</th>\n",
       "      <td>2019-12-31</td>\n",
       "      <td>44.6</td>\n",
       "      <td>37.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7428 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     OperatingDate  maxtempF  mintempF  precip Zipcode  Year\n",
       "0       2015-01-01      35.6      21.2     0.0   41071  2015\n",
       "1       2015-01-02      37.4      28.4     0.0   41071  2015\n",
       "2       2015-01-03      55.4      33.8     8.9   41071  2015\n",
       "3       2015-01-04      55.4      26.6     2.2   41071  2015\n",
       "4       2015-01-05      19.4      15.8     0.0   41071  2015\n",
       "...            ...       ...       ...     ...     ...   ...\n",
       "1852    2019-12-27      62.6      46.4     0.0   37863  2019\n",
       "1853    2019-12-28      64.4      46.4     0.0   37863  2019\n",
       "1854    2019-12-29      69.8      51.8     0.3   37863  2019\n",
       "1855    2019-12-30      53.6      37.4     4.8   37863  2019\n",
       "1856    2019-12-31      44.6      37.4     0.2   37863  2019\n",
       "\n",
       "[7428 rows x 6 columns]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_mergeddf = pd.concat([df_41071,df_08103,df_65616,df_37863])\n",
    "final_mergeddf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>maxtempF</th>\n",
       "      <th>mintempF</th>\n",
       "      <th>precip</th>\n",
       "      <th>Zipcode</th>\n",
       "      <th>Year</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OperatingDate</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2015-01-01</th>\n",
       "      <td>35.6</td>\n",
       "      <td>21.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-01-02</th>\n",
       "      <td>37.4</td>\n",
       "      <td>28.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-01-03</th>\n",
       "      <td>55.4</td>\n",
       "      <td>33.8</td>\n",
       "      <td>8.9</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-01-04</th>\n",
       "      <td>55.4</td>\n",
       "      <td>26.6</td>\n",
       "      <td>2.2</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-01-05</th>\n",
       "      <td>19.4</td>\n",
       "      <td>15.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-27</th>\n",
       "      <td>62.6</td>\n",
       "      <td>46.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-28</th>\n",
       "      <td>64.4</td>\n",
       "      <td>46.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-29</th>\n",
       "      <td>69.8</td>\n",
       "      <td>51.8</td>\n",
       "      <td>0.3</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-30</th>\n",
       "      <td>53.6</td>\n",
       "      <td>37.4</td>\n",
       "      <td>4.8</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-31</th>\n",
       "      <td>44.6</td>\n",
       "      <td>37.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7428 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               maxtempF  mintempF  precip Zipcode  Year\n",
       "OperatingDate                                          \n",
       "2015-01-01         35.6      21.2     0.0   41071  2015\n",
       "2015-01-02         37.4      28.4     0.0   41071  2015\n",
       "2015-01-03         55.4      33.8     8.9   41071  2015\n",
       "2015-01-04         55.4      26.6     2.2   41071  2015\n",
       "2015-01-05         19.4      15.8     0.0   41071  2015\n",
       "...                 ...       ...     ...     ...   ...\n",
       "2019-12-27         62.6      46.4     0.0   37863  2019\n",
       "2019-12-28         64.4      46.4     0.0   37863  2019\n",
       "2019-12-29         69.8      51.8     0.3   37863  2019\n",
       "2019-12-30         53.6      37.4     4.8   37863  2019\n",
       "2019-12-31         44.6      37.4     0.2   37863  2019\n",
       "\n",
       "[7428 rows x 5 columns]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_mergeddf.set_index(\"OperatingDate\", inplace = True) \n",
    "final_mergeddf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "41071    1857\n",
       "65616    1857\n",
       "08103    1857\n",
       "37863    1857\n",
       "Name: Zipcode, dtype: int64"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_mergeddf['Zipcode'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7428"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(final_mergeddf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OperatingDate</th>\n",
       "      <th>Park Name</th>\n",
       "      <th>Zipcode</th>\n",
       "      <th>Total Attendance</th>\n",
       "      <th>Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Dollywood</td>\n",
       "      <td>37863</td>\n",
       "      <td>15889</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>41071</td>\n",
       "      <td>2224</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>08103</td>\n",
       "      <td>3031</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>Dollywood</td>\n",
       "      <td>37863</td>\n",
       "      <td>6618</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>41071</td>\n",
       "      <td>3228</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10529</th>\n",
       "      <td>2019-12-28</td>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>08103</td>\n",
       "      <td>3864</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10530</th>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>Silver Dollar City</td>\n",
       "      <td>65616</td>\n",
       "      <td>21400</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10531</th>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>Dollywood</td>\n",
       "      <td>37863</td>\n",
       "      <td>20977</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10536</th>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>41071</td>\n",
       "      <td>3340</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10537</th>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>08103</td>\n",
       "      <td>4237</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7071 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      OperatingDate           Park Name Zipcode  Total Attendance  Year\n",
       "0        2015-01-01           Dollywood   37863             15889  2015\n",
       "3        2015-01-01    Newport Aquarium   41071              2224  2015\n",
       "4        2015-01-01  Adventure Aquarium   08103              3031  2015\n",
       "5        2015-01-02           Dollywood   37863              6618  2015\n",
       "8        2015-01-02    Newport Aquarium   41071              3228  2015\n",
       "...             ...                 ...     ...               ...   ...\n",
       "10529    2019-12-28  Adventure Aquarium   08103              3864  2019\n",
       "10530    2019-12-29  Silver Dollar City   65616             21400  2019\n",
       "10531    2019-12-29           Dollywood   37863             20977  2019\n",
       "10536    2019-12-29    Newport Aquarium   41071              3340  2019\n",
       "10537    2019-12-29  Adventure Aquarium   08103              4237  2019\n",
       "\n",
       "[7071 rows x 5 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finaldata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "41071    1824\n",
       "08103    1824\n",
       "37863    1817\n",
       "65616    1606\n",
       "Name: Zipcode, dtype: int64"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finaldata['Zipcode'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7071"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(finaldata)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# finaldata.set_index(\"OperatingDate\", inplace = True) \n",
    "# finaldata.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Adventure Aquarium          1824\n",
       "Newport Aquarium            1824\n",
       "Dollywood                   1307\n",
       "Silver Dollar City          1147\n",
       "Dollywood Splash Country     510\n",
       "White Water                  459\n",
       "Name: Park Name, dtype: int64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finaldata['Park Name'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7071"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(finaldata)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OperatingDate</th>\n",
       "      <th>maxtempF</th>\n",
       "      <th>mintempF</th>\n",
       "      <th>precip</th>\n",
       "      <th>Zipcode</th>\n",
       "      <th>Year_x</th>\n",
       "      <th>Park Name</th>\n",
       "      <th>Total Attendance</th>\n",
       "      <th>Year_y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>35.6</td>\n",
       "      <td>21.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>2224.0</td>\n",
       "      <td>2015.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>37.4</td>\n",
       "      <td>28.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>3228.0</td>\n",
       "      <td>2015.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-03</td>\n",
       "      <td>55.4</td>\n",
       "      <td>33.8</td>\n",
       "      <td>8.9</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>2960.0</td>\n",
       "      <td>2015.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-04</td>\n",
       "      <td>55.4</td>\n",
       "      <td>26.6</td>\n",
       "      <td>2.2</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>1484.0</td>\n",
       "      <td>2015.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-05</td>\n",
       "      <td>19.4</td>\n",
       "      <td>15.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>429.0</td>\n",
       "      <td>2015.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  OperatingDate  maxtempF  mintempF  precip Zipcode  Year_x         Park Name  \\\n",
       "0    2015-01-01      35.6      21.2     0.0   41071    2015  Newport Aquarium   \n",
       "1    2015-01-02      37.4      28.4     0.0   41071    2015  Newport Aquarium   \n",
       "2    2015-01-03      55.4      33.8     8.9   41071    2015  Newport Aquarium   \n",
       "3    2015-01-04      55.4      26.6     2.2   41071    2015  Newport Aquarium   \n",
       "4    2015-01-05      19.4      15.8     0.0   41071    2015  Newport Aquarium   \n",
       "\n",
       "   Total Attendance  Year_y  \n",
       "0            2224.0  2015.0  \n",
       "1            3228.0  2015.0  \n",
       "2            2960.0  2015.0  \n",
       "3            1484.0  2015.0  \n",
       "4             429.0  2015.0  "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final = final_mergeddf.merge(finaldata, how='outer', on=(\"OperatingDate\", \"Zipcode\"))\n",
    "final.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8373"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(final)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8125"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_df = final.drop_duplicates(keep=False)\n",
    "len(result_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>OperatingDate</th>\n",
       "      <th>maxtempF</th>\n",
       "      <th>mintempF</th>\n",
       "      <th>precip</th>\n",
       "      <th>Zipcode</th>\n",
       "      <th>Year_x</th>\n",
       "      <th>Park Name</th>\n",
       "      <th>Total Attendance</th>\n",
       "      <th>Year_y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>35.6</td>\n",
       "      <td>21.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>2224.0</td>\n",
       "      <td>2015.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>37.4</td>\n",
       "      <td>28.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>3228.0</td>\n",
       "      <td>2015.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2015-01-03</td>\n",
       "      <td>55.4</td>\n",
       "      <td>33.8</td>\n",
       "      <td>8.9</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>2960.0</td>\n",
       "      <td>2015.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2015-01-04</td>\n",
       "      <td>55.4</td>\n",
       "      <td>26.6</td>\n",
       "      <td>2.2</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>1484.0</td>\n",
       "      <td>2015.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2015-01-05</td>\n",
       "      <td>19.4</td>\n",
       "      <td>15.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>429.0</td>\n",
       "      <td>2015.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8368</th>\n",
       "      <td>8368</td>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>69.8</td>\n",
       "      <td>51.8</td>\n",
       "      <td>0.3</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "      <td>Dollywood</td>\n",
       "      <td>20977.0</td>\n",
       "      <td>2019.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8369</th>\n",
       "      <td>8369</td>\n",
       "      <td>2019-12-30</td>\n",
       "      <td>53.6</td>\n",
       "      <td>37.4</td>\n",
       "      <td>4.8</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8370</th>\n",
       "      <td>8370</td>\n",
       "      <td>2019-12-30</td>\n",
       "      <td>53.6</td>\n",
       "      <td>37.4</td>\n",
       "      <td>4.8</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8371</th>\n",
       "      <td>8371</td>\n",
       "      <td>2019-12-31</td>\n",
       "      <td>44.6</td>\n",
       "      <td>37.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8372</th>\n",
       "      <td>8372</td>\n",
       "      <td>2019-12-31</td>\n",
       "      <td>44.6</td>\n",
       "      <td>37.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8373 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      index OperatingDate  maxtempF  mintempF  precip Zipcode  Year_x  \\\n",
       "0         0    2015-01-01      35.6      21.2     0.0   41071    2015   \n",
       "1         1    2015-01-02      37.4      28.4     0.0   41071    2015   \n",
       "2         2    2015-01-03      55.4      33.8     8.9   41071    2015   \n",
       "3         3    2015-01-04      55.4      26.6     2.2   41071    2015   \n",
       "4         4    2015-01-05      19.4      15.8     0.0   41071    2015   \n",
       "...     ...           ...       ...       ...     ...     ...     ...   \n",
       "8368   8368    2019-12-29      69.8      51.8     0.3   37863    2019   \n",
       "8369   8369    2019-12-30      53.6      37.4     4.8   37863    2019   \n",
       "8370   8370    2019-12-30      53.6      37.4     4.8   37863    2019   \n",
       "8371   8371    2019-12-31      44.6      37.4     0.2   37863    2019   \n",
       "8372   8372    2019-12-31      44.6      37.4     0.2   37863    2019   \n",
       "\n",
       "             Park Name  Total Attendance  Year_y  \n",
       "0     Newport Aquarium            2224.0  2015.0  \n",
       "1     Newport Aquarium            3228.0  2015.0  \n",
       "2     Newport Aquarium            2960.0  2015.0  \n",
       "3     Newport Aquarium            1484.0  2015.0  \n",
       "4     Newport Aquarium             429.0  2015.0  \n",
       "...                ...               ...     ...  \n",
       "8368         Dollywood           20977.0  2019.0  \n",
       "8369               NaN               NaN     NaN  \n",
       "8370               NaN               NaN     NaN  \n",
       "8371               NaN               NaN     NaN  \n",
       "8372               NaN               NaN     NaN  \n",
       "\n",
       "[8373 rows x 10 columns]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OperatingDate</th>\n",
       "      <th>maxtempF</th>\n",
       "      <th>mintempF</th>\n",
       "      <th>precip</th>\n",
       "      <th>Zipcode</th>\n",
       "      <th>Year_x</th>\n",
       "      <th>Park Name</th>\n",
       "      <th>Total Attendance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>35.6</td>\n",
       "      <td>21.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>2224.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>37.4</td>\n",
       "      <td>28.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>3228.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-03</td>\n",
       "      <td>55.4</td>\n",
       "      <td>33.8</td>\n",
       "      <td>8.9</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>2960.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-04</td>\n",
       "      <td>55.4</td>\n",
       "      <td>26.6</td>\n",
       "      <td>2.2</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>1484.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-05</td>\n",
       "      <td>19.4</td>\n",
       "      <td>15.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>429.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8368</th>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>69.8</td>\n",
       "      <td>51.8</td>\n",
       "      <td>0.3</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "      <td>Dollywood</td>\n",
       "      <td>20977.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8369</th>\n",
       "      <td>2019-12-30</td>\n",
       "      <td>53.6</td>\n",
       "      <td>37.4</td>\n",
       "      <td>4.8</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8370</th>\n",
       "      <td>2019-12-30</td>\n",
       "      <td>53.6</td>\n",
       "      <td>37.4</td>\n",
       "      <td>4.8</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8371</th>\n",
       "      <td>2019-12-31</td>\n",
       "      <td>44.6</td>\n",
       "      <td>37.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8372</th>\n",
       "      <td>2019-12-31</td>\n",
       "      <td>44.6</td>\n",
       "      <td>37.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>37863</td>\n",
       "      <td>2019</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8373 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     OperatingDate  maxtempF  mintempF  precip Zipcode  Year_x  \\\n",
       "0       2015-01-01      35.6      21.2     0.0   41071    2015   \n",
       "1       2015-01-02      37.4      28.4     0.0   41071    2015   \n",
       "2       2015-01-03      55.4      33.8     8.9   41071    2015   \n",
       "3       2015-01-04      55.4      26.6     2.2   41071    2015   \n",
       "4       2015-01-05      19.4      15.8     0.0   41071    2015   \n",
       "...            ...       ...       ...     ...     ...     ...   \n",
       "8368    2019-12-29      69.8      51.8     0.3   37863    2019   \n",
       "8369    2019-12-30      53.6      37.4     4.8   37863    2019   \n",
       "8370    2019-12-30      53.6      37.4     4.8   37863    2019   \n",
       "8371    2019-12-31      44.6      37.4     0.2   37863    2019   \n",
       "8372    2019-12-31      44.6      37.4     0.2   37863    2019   \n",
       "\n",
       "             Park Name  Total Attendance  \n",
       "0     Newport Aquarium            2224.0  \n",
       "1     Newport Aquarium            3228.0  \n",
       "2     Newport Aquarium            2960.0  \n",
       "3     Newport Aquarium            1484.0  \n",
       "4     Newport Aquarium             429.0  \n",
       "...                ...               ...  \n",
       "8368         Dollywood           20977.0  \n",
       "8369               NaN               NaN  \n",
       "8370               NaN               NaN  \n",
       "8371               NaN               NaN  \n",
       "8372               NaN               NaN  \n",
       "\n",
       "[8373 rows x 8 columns]"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finaldf = final.drop(columns=['Year_y'])\n",
    "finaldf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OperatingDate</th>\n",
       "      <th>maxtempF</th>\n",
       "      <th>mintempF</th>\n",
       "      <th>precip</th>\n",
       "      <th>Zipcode</th>\n",
       "      <th>Year_x</th>\n",
       "      <th>Park Name</th>\n",
       "      <th>Total Attendance</th>\n",
       "      <th>NewPrecip</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>35.6</td>\n",
       "      <td>21.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>2224.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>37.4</td>\n",
       "      <td>28.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>3228.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-03</td>\n",
       "      <td>55.4</td>\n",
       "      <td>33.8</td>\n",
       "      <td>8.9</td>\n",
       "      <td>41071</td>\n",
       "      <td>2015</td>\n",
       "      <td>Newport Aquarium</td>\n",
       "      <td>2960.0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  OperatingDate  maxtempF  mintempF  precip Zipcode  Year_x         Park Name  \\\n",
       "0    2015-01-01      35.6      21.2     0.0   41071    2015  Newport Aquarium   \n",
       "1    2015-01-02      37.4      28.4     0.0   41071    2015  Newport Aquarium   \n",
       "2    2015-01-03      55.4      33.8     8.9   41071    2015  Newport Aquarium   \n",
       "\n",
       "   Total Attendance NewPrecip  \n",
       "0            2224.0     False  \n",
       "1            3228.0     False  \n",
       "2            2960.0      True  "
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "precip = []\n",
    "for row in range(len(finaldf)):\n",
    "    if finaldf.iloc[row,3] > 0:    precip.append('True')\n",
    "    else:           precip.append('False')\n",
    "# Create a column from the list\n",
    "finaldf['NewPrecip'] = precip\n",
    "finaldf.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OperatingDate       datetime64[ns]\n",
      "maxtempF                   float64\n",
      "mintempF                   float64\n",
      "precip                     float64\n",
      "Zipcode                     object\n",
      "Year_x                       int64\n",
      "Park Name                   object\n",
      "Total Attendance           float64\n",
      "NewPrecip                   object\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(finaldf.dtypes)\n",
    "# finaldf.columns.dtype\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finaldf.columns.get_loc(\"precip\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Park Name</th>\n",
       "      <th>Year_x</th>\n",
       "      <th>NewPrecip</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>2015</td>\n",
       "      <td>157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>2016</td>\n",
       "      <td>158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>2017</td>\n",
       "      <td>158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>2018</td>\n",
       "      <td>189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>2019</td>\n",
       "      <td>214</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Park Name  Year_x  NewPrecip\n",
       "0  Adventure Aquarium    2015        157\n",
       "1  Adventure Aquarium    2016        158\n",
       "2  Adventure Aquarium    2017        158\n",
       "3  Adventure Aquarium    2018        189\n",
       "4  Adventure Aquarium    2019        214"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_a = finaldf.loc[finaldf[\"NewPrecip\"]==\"True\",]\n",
    "final_b = final_a.groupby(['Park Name', 'Year_x'])[[\"NewPrecip\"]].count()\n",
    "final_b = final_b.reset_index()\n",
    "final_b.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Park Name</th>\n",
       "      <th>Year_x</th>\n",
       "      <th>NewPrecip</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>2015</td>\n",
       "      <td>365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>2016</td>\n",
       "      <td>366</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>2017</td>\n",
       "      <td>365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>2018</td>\n",
       "      <td>365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>2019</td>\n",
       "      <td>392</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Park Name  Year_x  NewPrecip\n",
       "0  Adventure Aquarium    2015        365\n",
       "1  Adventure Aquarium    2016        366\n",
       "2  Adventure Aquarium    2017        365\n",
       "3  Adventure Aquarium    2018        365\n",
       "4  Adventure Aquarium    2019        392"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_c = finaldf.groupby(['Park Name', 'Year_x'])[[\"NewPrecip\"]].count()\n",
    "final_c = final_c.reset_index()\n",
    "final_c.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Park Name</th>\n",
       "      <th>Year_x</th>\n",
       "      <th>NewPrecip</th>\n",
       "      <th>perc_precip</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>2015</td>\n",
       "      <td>157</td>\n",
       "      <td>43.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>2016</td>\n",
       "      <td>158</td>\n",
       "      <td>43.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>2017</td>\n",
       "      <td>158</td>\n",
       "      <td>43.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>2018</td>\n",
       "      <td>189</td>\n",
       "      <td>51.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Adventure Aquarium</td>\n",
       "      <td>2019</td>\n",
       "      <td>214</td>\n",
       "      <td>54.7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Park Name  Year_x  NewPrecip  perc_precip\n",
       "0  Adventure Aquarium    2015        157         43.1\n",
       "1  Adventure Aquarium    2016        158         43.3\n",
       "2  Adventure Aquarium    2017        158         43.4\n",
       "3  Adventure Aquarium    2018        189         51.9\n",
       "4  Adventure Aquarium    2019        214         54.7"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "precip_final = round(final_b[\"NewPrecip\"] / (final_c[\"NewPrecip\"] - 1) *100, 1)\n",
    "precip_final\n",
    "\n",
    "final_b[\"perc_precip\"] = precip_final\n",
    "final_b.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Park Name</th>\n",
       "      <th>Year_x</th>\n",
       "      <th>NewPrecip</th>\n",
       "      <th>perc_precip</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Dollywood Splash Country</td>\n",
       "      <td>2015</td>\n",
       "      <td>61</td>\n",
       "      <td>62.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Dollywood Splash Country</td>\n",
       "      <td>2016</td>\n",
       "      <td>69</td>\n",
       "      <td>67.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Dollywood Splash Country</td>\n",
       "      <td>2017</td>\n",
       "      <td>69</td>\n",
       "      <td>67.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Dollywood Splash Country</td>\n",
       "      <td>2018</td>\n",
       "      <td>78</td>\n",
       "      <td>76.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Dollywood Splash Country</td>\n",
       "      <td>2019</td>\n",
       "      <td>85</td>\n",
       "      <td>84.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Park Name  Year_x  NewPrecip  perc_precip\n",
       "10  Dollywood Splash Country    2015         61         62.9\n",
       "11  Dollywood Splash Country    2016         69         67.6\n",
       "12  Dollywood Splash Country    2017         69         67.0\n",
       "13  Dollywood Splash Country    2018         78         76.5\n",
       "14  Dollywood Splash Country    2019         85         84.2"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_b_aa = final_b[final_b['Park Name']==\"Adventure Aquarium\"]\n",
    "final_b_naq = final_b[final_b['Park Name']==\"Newport Aquarium\"]\n",
    "final_b_dw = final_b[final_b['Park Name']==\"Dollywood\"]\n",
    "final_b_sd = final_b[final_b['Park Name']==\"Silver Dollar City\"]\n",
    "final_b_ww = final_b[final_b['Park Name']==\"White Water\"]\n",
    "final_b_ds = final_b[final_b['Park Name']==\"Dollywood Splash Country\"]\n",
    "final_b_ds \n",
    "# print(final_b_dw.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Park Name            object\n",
      "Year_x                int64\n",
      "Total Attendance    float64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "Attendance = finaldf.groupby(['Park Name', 'Year_x'])[\"Total Attendance\"].sum()\n",
    "Attendance = Attendance.reset_index()\n",
    "Attendance.head(10)\n",
    "# Attendance = Attendance.astype({'Total Attendance': int})\n",
    "print(Attendance.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Park Name</th>\n",
       "      <th>Year_x</th>\n",
       "      <th>Total Attendance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Dollywood Splash Country</td>\n",
       "      <td>2015</td>\n",
       "      <td>390625.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Dollywood Splash Country</td>\n",
       "      <td>2016</td>\n",
       "      <td>424169.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Dollywood Splash Country</td>\n",
       "      <td>2017</td>\n",
       "      <td>382891.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Dollywood Splash Country</td>\n",
       "      <td>2018</td>\n",
       "      <td>357136.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Dollywood Splash Country</td>\n",
       "      <td>2019</td>\n",
       "      <td>392839.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Park Name  Year_x  Total Attendance\n",
       "10  Dollywood Splash Country    2015          390625.0\n",
       "11  Dollywood Splash Country    2016          424169.0\n",
       "12  Dollywood Splash Country    2017          382891.0\n",
       "13  Dollywood Splash Country    2018          357136.0\n",
       "14  Dollywood Splash Country    2019          392839.0"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Attendance_aa = Attendance[Attendance['Park Name']==\"Adventure Aquarium\"]\n",
    "Attendance_naq = Attendance[Attendance['Park Name']==\"Newport Aquarium\"]\n",
    "Attendance_dw = Attendance[Attendance['Park Name']==\"Dollywood\"]\n",
    "Attendance_sd = Attendance[Attendance['Park Name']==\"Silver Dollar City\"]\n",
    "Attendance_ww = Attendance[Attendance['Park Name']==\"White Water\"]\n",
    "Attendance_ds = Attendance[Attendance['Park Name']==\"Dollywood Splash Country\"]\n",
    "Attendance_ds.head(10)\n",
    "# Attendance_naq.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax = plt.subplots()\n",
    "t = [2015, 2016, 2017, 2018, 2019]\n",
    "\n",
    "ax.bar(t, Attendance_aa[\"Total Attendance\"], width=0.6, color=\"blue\")\n",
    "ax.set_xlabel(\"Year\", color=\"black\", fontsize=14)\n",
    "ax.set_ylabel(\"Attendance\",color=\"blue\",fontsize=14)\n",
    "\n",
    "# twin object for two different y-axis on the sample plot\n",
    "ax2=ax.twinx()\n",
    "ax2.plot(t, final_b_aa.perc_precip, color=\"red\", marker=\"o\",linewidth=4)\n",
    "ax2.set_ylabel(\"Precipitation, %\",color=\"red\",fontsize=14)\n",
    "\n",
    "# ax.grid(True)\n",
    "fig.tight_layout()\n",
    "plt.title(\"Adventure Aquarium\", fontsize= 15)\n",
    "plt.show()\n",
    "#save the plot as a file\n",
    "fig.savefig('Adventure Aquarium.png',\n",
    "            format='png',\n",
    "            dpi=200,\n",
    "            bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,axn = plt.subplots()\n",
    "t = [2015, 2016, 2017, 2018, 2019]\n",
    "\n",
    "axn.bar(t, Attendance_naq[\"Total Attendance\"], width=0.6, color=\"blue\")\n",
    "axn.set_xlabel(\"Year\", color=\"black\", fontsize=14)\n",
    "axn.set_ylabel(\"Attendance\",color=\"blue\",fontsize=14)\n",
    "\n",
    "# twin object for two different y-axis on the sample plot\n",
    "axn2=axn.twinx()\n",
    "axn2.plot(t, final_b_naq.perc_precip, color=\"red\", marker=\"o\",linewidth=4)\n",
    "axn2.set_ylabel(\"Precipitation, %\",color=\"red\",fontsize=14)\n",
    "\n",
    "# ax.grid(True)\n",
    "fig.tight_layout()\n",
    "plt.title(\"Newport Aquarium\", fontsize= 15)\n",
    "plt.show()\n",
    "#save the plot as a file\n",
    "fig.savefig('Newport Aquarium.png',\n",
    "            format='png',\n",
    "            dpi=200,\n",
    "            bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,axd = plt.subplots()\n",
    "t = [2015, 2016, 2017, 2018, 2019]\n",
    "\n",
    "axd.bar(t, Attendance_dw[\"Total Attendance\"], width=0.6, color=\"blue\")\n",
    "axd.set_xlabel(\"Year\", color=\"black\", fontsize=14)\n",
    "axd.set_ylabel(\"Attendance\",color=\"blue\",fontsize=14)\n",
    "\n",
    "# twin object for two different y-axis on the sample plot\n",
    "axd2=axd.twinx()\n",
    "axd2.plot(t, final_b_dw.perc_precip, color=\"red\", marker=\"o\",linewidth=4)\n",
    "axd2.set_ylabel(\"Precipitation, %\",color=\"red\",fontsize=14)\n",
    "\n",
    "# ax.grid(True)\n",
    "fig.tight_layout()\n",
    "plt.title(\"Dollywood\", fontsize= 15)\n",
    "plt.show()\n",
    "#save the plot as a file\n",
    "fig.savefig('Dollywood.png',\n",
    "            format='png',\n",
    "            dpi=200,\n",
    "            bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,axs = plt.subplots()\n",
    "t = [2015, 2016, 2017, 2018, 2019]\n",
    "\n",
    "axs.bar(t, Attendance_sd[\"Total Attendance\"], width=0.6, color=\"blue\")\n",
    "axs.set_xlabel(\"Year\", color=\"black\", fontsize=14)\n",
    "axs.set_ylabel(\"Attendance\",color=\"blue\",fontsize=14)\n",
    "\n",
    "# twin object for two different y-axis on the sample plot\n",
    "axs2=axs.twinx()\n",
    "axs2.plot(t, final_b_sd.perc_precip, color=\"red\", marker=\"o\",linewidth=4)\n",
    "axs2.set_ylabel(\"Precipitation, %\",color=\"red\",fontsize=14)\n",
    "\n",
    "# ax.grid(True)\n",
    "fig.tight_layout()\n",
    "plt.title(\"Silver Dollar City\", fontsize= 15)\n",
    "plt.show()\n",
    "#save the plot as a file\n",
    "fig.savefig('Silver Dollar City.png',\n",
    "            format='png',\n",
    "            dpi=200,\n",
    "            bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,axw = plt.subplots()\n",
    "t = [2015, 2016, 2017, 2018, 2019]\n",
    "\n",
    "axw.bar(t, Attendance_ww[\"Total Attendance\"], width=0.6, color=\"blue\")\n",
    "axw.set_xlabel(\"Year\", color=\"black\", fontsize=14)\n",
    "axw.set_ylabel(\"Attendance\",color=\"blue\",fontsize=14)\n",
    "\n",
    "# twin object for two different y-axis on the sample plot\n",
    "axw2=axw.twinx()\n",
    "axw2.plot(t, final_b_ww.perc_precip, color=\"red\", marker=\"o\",linewidth=4)\n",
    "axw2.set_ylabel(\"Precipitation, %\",color=\"red\",fontsize=14)\n",
    "\n",
    "# ax.grid(True)\n",
    "fig.tight_layout()\n",
    "plt.title(\"White Water\", fontsize= 15)\n",
    "plt.show()\n",
    "#save the plot as a file\n",
    "fig.savefig('White Water.png',\n",
    "             format='png',\n",
    "             dpi=200,\n",
    "             bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,axds = plt.subplots()\n",
    "t = [2015, 2016, 2017, 2018, 2019]\n",
    "\n",
    "axds.bar(t, Attendance_ds[\"Total Attendance\"], width=0.6, color=\"blue\")\n",
    "axds.set_xlabel(\"Year\", color=\"black\", fontsize=14)\n",
    "axds.set_ylabel(\"Attendance\",color=\"blue\",fontsize=14)\n",
    "\n",
    "# twin object for two different y-axis on the sample plot\n",
    "axds2=axds.twinx()\n",
    "axds2.plot(t, final_b_ds.perc_precip, color=\"red\", marker=\"o\",linewidth=4)\n",
    "axds2.set_ylabel(\"Precipitation, %\",color=\"red\",fontsize=14)\n",
    "\n",
    "# ax.grid(True)\n",
    "fig.tight_layout()\n",
    "plt.title(\"Dollywood Splash Country\", fontsize= 15)\n",
    "plt.show()\n",
    "#save the plot as a file\n",
    "fig.savefig('Dollywood Splash Country.png',\n",
    "             format='png',\n",
    "             dpi=200,\n",
    "             bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
